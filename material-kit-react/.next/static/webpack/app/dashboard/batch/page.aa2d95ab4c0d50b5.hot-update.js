"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/batch/page",{

/***/ "(app-pages-browser)/./src/components/dashboard/batch/fetchPredictions.js":
/*!************************************************************!*\
  !*** ./src/components/dashboard/batch/fetchPredictions.js ***!
  \************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPredictions: function() { return /* binding */ fetchPredictions; }\n/* harmony export */ });\n// export const fetchPredictions = async (selectedDate, startTime, endTime) => {\n//   try {\n//     // 첫 번째 요청: receive_prediction API\n//     const response = await fetch(\"http://localhost:5000/batch/receive_prediction\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         selected_date: selectedDate,\n//         start_time: startTime,\n//         end_time: endTime,\n//       }),\n//     });\n//     if (!response.ok) {\n//       throw new Error(\"Failed to fetch data from receive_prediction\");\n//     }\n//     const predictionData = await response.json(); // 예측 데이터 파싱\n//     // 두 번째 요청: send_pie API\n//     const pieResponse = await fetch(\"http://localhost:5000/batch/send_pie\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         selected_date: selectedDate,\n//         start_time: startTime,\n//         end_time: endTime,\n//       }),\n//     });\n//     if (!pieResponse.ok) {\n//       throw new Error(\"Failed to fetch data from send_pie\");\n//     }\n//     const pieData = await pieResponse.json(); // 파이 데이터 파싱\n//     // 세 번째 요청: protocol_rate API\n//     const protocolResponse = await fetch(\"http://localhost:5000/batch/protocol_rate\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         selected_date: selectedDate,\n//         start_time: startTime,\n//         end_time: endTime,\n//       }),\n//     });\n//     if (!protocolResponse.ok) {\n//       throw new Error(\"Failed to fetch data from protocol_rate\");\n//     }\n//     const protocolData = await protocolResponse.json(); // 프로토콜 데이터 파싱\n//     // 모든 데이터를 객체로 반환\n//     return {\n//       predictionData, // receive_prediction의 예측 메시지\n//       pieData,        // send_pie의 트래픽/앱 비율\n//       protocolData    // protocol_rate의 프로토콜 데이터\n//     };\n//   } catch (error) {\n//     console.error(\"Error in fetchPredictions:\", error);\n//     return null;\n//   }\n// };\nconst fetchPredictions = async (selectedDate, startTime, endTime)=>{\n    try {\n        // 1. receive_prediction API 호출\n        const receivePredictionResponse = await fetch(\"http://localhost:5000/batch/receive_prediction\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                date: selectedDate,\n                start_time: startTime,\n                end_time: endTime\n            })\n        });\n        if (!receivePredictionResponse.ok) {\n            throw new Error(\"Failed to fetch prediction data\");\n        }\n        const predictionData = await receivePredictionResponse.json();\n        console.log(\"Prediction Data:\", predictionData); // 예측 데이터를 로그로 출력\n        // 2. send_pie API 호출\n        const sendPieResponse = await fetch(\"http://localhost:5000/batch/send_pie?date=\".concat(selectedDate, \"&start_time=\").concat(startTime, \"&end_time=\").concat(endTime), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!sendPieResponse.ok) {\n            throw new Error(\"Failed to fetch pie chart data\");\n        }\n        const pieData = await sendPieResponse.json();\n        console.log(\"Pie Data:\", pieData); // 파이 데이터를 로그로 출력\n        // 3. protocol_rate API 호출\n        const protocolRateResponse = await fetch(\"http://localhost:5000/batch/protocol_rate?date=\".concat(selectedDate, \"&start_time=\").concat(startTime, \"&end_time=\").concat(endTime), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!protocolRateResponse.ok) {\n            throw new Error(\"Failed to fetch protocol rate data\");\n        }\n        const protocolData = await protocolRateResponse.json();\n        console.log(\"Protocol Rate Data:\", protocolData); // 프로토콜 데이터를 로그로 출력\n        // 모든 데이터를 한 객체로 반환\n        return {\n            predictionData,\n            pieData,\n            protocolData\n        };\n    } catch (error) {\n        console.error(\"Error fetching predictions:\", error);\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/dashboard/batch/fetchPredictions.js\n"));

/***/ })

});